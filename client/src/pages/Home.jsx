//////import React,{useState,useEffect} from 'react'
//////import { Loader,Card ,Form } from "../components";
//////
//////
//////const RenderCards = ({data,title}) =>{
//////if(data?.length>0) { 
//////
//////	return (
//////	data.map((post)=><Card key={post._id}{...post}/>)
//////	);
//////}
//////return (
//////	<h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>{title}
//////
//////	</h2>
//////);
//////};
//////const Home = () => {
//////const [loading ,setLoading] = useState(false);
//////
//////const [allPosts,setAllPosts] = useState(null);
//////
//////const [searchText,setSearchText] = useState("");
//////const [searchTimeout, setSearchTimeout] = useState(null);
//////  const [searchedResults, setSearchedResults] = useState(null);
//////  useEffect(()=>{
//////	const fetchPosts = async ()=>{
//////      setLoading(true);
//////	  try{
//////const response = await fetch("http://localhost:8080/api/v1/post",{
//////	method:'GET',
//////	headers:{
//////		'Content-type':'application/json',
//////	},
//////})
//////if(response.ok){
//////	const result = await response.json();
//////	setAllPosts(result.data.reverse());
//////}
//////	  }catch(error){
//////
//////	  }finally{
//////		setLoading(false);
//////	  }
//////	}
//////	fetchPosts();
//////  },[]);
//////	return (
//////	<section className="max-w-7xl mx-auto">
//////		<div>
//////			<h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
//////			<p className='mt-2 text-[#666e75] text-[14px] max-w-[500px]'>Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
//////		
//////		</div>
//////		<div className="mt-16"
//////		>
//////			<Form/>
//////		</div>
//////		<div className="mt-10">
//////			{loading?(
//////				<div className="flex justify-center items-center">
//////					<Loader/>
//////				</div>
//////			):(
//////				<>
//////					{searchText && (
//////						<h2 className='font-medium text-[#666e75] text-xl mb-3'>
//////							Showing Results for <span className="text-[#222328]"> : {searchText} </span>
//////						</h2>
//////					)}
//////					<div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
//////
//////{searchText ?
//////(
//////	<RenderCards
//////    data={[]}
//////	title="No Search Results Found"
//////	/>
//////):(
//////    <RenderCards
//////    data={allPosts}
//////    title="No Post Found"
//////    /> 
//////)}
//////					</div>
//////				
//////				</>
//////			)
//////		}
//////		</div>
//////
//////	</section>
//////  );
//////};
//////export default Home;
////import React, { useState } from 'react';
////import { useNavigate } from 'react-router-dom';
////
////import { preview } from '../assets';
////import { getRandomPrompt } from '../utils';
////import { Form, Loader } from '../components';
////
////const CreatePost = () => {
////  const navigate = useNavigate();
////
////  const [form, setForm] = useState({
////    name: '',
////    prompt: '',
////    photo: '',
////  });
////
////  const [generatingImg, setGeneratingImg] = useState(false);
////  const [loading, setLoading] = useState(false);
////
////  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });
////
////  const handleSurpriseMe = () => {
////    const randomPrompt = getRandomPrompt(form.prompt);
////    setForm({ ...form, prompt: randomPrompt });
////  };
////
////  const generateImage = async () => {
////    if (form.prompt) {
////      try {
////        setGeneratingImg(true);
////        const response = await fetch('https://dalle-arbb.onrender.com/api/v1/dalle', {
////          method: 'POST',
////          headers: {
////            'Content-Type': 'application/json',
////          },
////          body: JSON.stringify({
////            prompt: form.prompt,
////          }),
////        });
////
////        const data = await response.json();
////        setForm({ ...form, photo: `data:image/jpeg;base64,${data.photo}` });
////      } catch (err) {
////        alert(err);
////      } finally {
////        setGeneratingImg(false);
////      }
////    } else {
////      alert('Please provide proper prompt');
////    }
////  };
////
////  const handleSubmit = async (e) => {
////    e.preventDefault();
////
////    if (form.prompt && form.photo) {
////      setLoading(true);
////      try {
////        const response = await fetch('http://localhost:8080/api/v1/post', {
////          method: 'POST',
////          headers: {
////            'Content-Type': 'application/json',
////          },
////          body: JSON.stringify({ ...form }),
////        });
////
////        await response.json();
////        alert('Success');
////        navigate('/');
////      } catch (err) {
////        alert(err);
////      } finally {
////        setLoading(false);
////      }
////    } else {
////      alert('Please generate an image with proper details');
////    }
////  };
////
////  return (
////    <section className="max-w-7xl mx-auto">
////      <div>
////        <h1 className="font-extrabold text-[#222328] text-[32px]">Create</h1>
////        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Generate an imaginative image through DALL-E AI and share it with the community</p>
////      </div>
////
////      <form className="mt-16 max-w-3xl" onSubmit={handleSubmit}>
////        <div className="flex flex-col gap-5">
////          <Form
////            labelName="Your Name"
////            type="text"
////            name="name"
////            placeholder="Ex., john doe"
////            value={form.name}
////            handleChange={handleChange}
////          />
////
////          <Form
////            labelName="Prompt"
////            type="text"
////            name="prompt"
////            placeholder="An Impressionist oil painting of sunflowers in a purple vaseâ€¦"
////            value={form.prompt}
////            handleChange={handleChange}
////            isSurpriseMe
////            handleSurpriseMe={handleSurpriseMe}
////          />
////
////          <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 flex justify-center items-center">
////            { form.photo ? (
////              <img
////                src={form.photo}
////                alt={form.prompt}
////                className="w-full h-full object-contain"
////              />
////            ) : (
////              <img
////                src={preview}
////                alt="preview"
////                className="w-9/12 h-9/12 object-contain opacity-40"
////              />
////            )}
////
////            {generatingImg && (
////              <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
////                <Loader />
////              </div>
////            )}
////          </div>
////        </div>
////
////        <div className="mt-5 flex gap-5">
////          <button
////            type="button"
////            onClick={generateImage}
////            className=" text-white bg-green-700 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
////          >
////            {generatingImg ? 'Generating...' : 'Generate'}
////          </button>
////        </div>
////
////        <div className="mt-10">
////          <p className="mt-2 text-[#666e75] text-[14px]">** Once you have created the image you want, you can share it with others in the community **</p>
////          <button
////            type="submit"
////            className="mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
////          >
////            {loading ? 'Sharing...' : 'Share with the Community'}
////          </button>
////        </div>
////      </form>
////    </section>
////  );
////};
////
////export default CreatePost;
//
//import React, { useEffect, useState } from 'react';
//
//import { Card, Form, Loader } from '../components';
//
//const RenderCards = ({ data, title }) => {
//  if (data?.length > 0) {
//    return (
//      data.map((post) => <Card key={post._id} {...post} />)
//    );
//  }
//
//  return (
//    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
//  );
//};
//
//const Home = () => {
//  const [loading, setLoading] = useState(false);
//  const [allPosts, setAllPosts] = useState(null);
//
//  const [searchText, setSearchText] = useState('');
//  const [searchTimeout, setSearchTimeout] = useState(null);
//  const [searchedResults, setSearchedResults] = useState(null);
//
//  const fetchPosts = async () => {
//    setLoading(true);
//
//    try {
//      const response = await fetch('https://dalle-arbb.onrender.com/api/v1/post', {
//        method: 'GET',
//        headers: {
//          'Content-Type': 'application/json',
//        },
//      });
//
//      if (response.ok) {
//        const result = await response.json();
//        setAllPosts(result.data.reverse());
//      }
//    } catch (err) {
//      alert(err);
//    } finally {
//      setLoading(false);
//    }
//  };
//
//  useEffect(() => {
//    fetchPosts();
//  }, []);
//
//  const handleSearchChange = (e) => {
//    clearTimeout(searchTimeout);
//    setSearchText(e.target.value);
//
//    setSearchTimeout(
//      setTimeout(() => {
//        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
//        setSearchedResults(searchResult);
//      }, 500),
//    );
//  };
//
//  return (
//    <section className="max-w-7xl mx-auto">
//      <div>
//        <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
//        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
//      </div>
//
//      <div className="mt-16">
//        <Form
//          labelName="Search posts"
//          type="text"
//          name="text"
//          placeholder="Search something..."
//          value={searchText}
//          handleChange={handleSearchChange}
//        />
//      </div>
//
//      <div className="mt-10">
//        {loading ? (
//          <div className="flex justify-center items-center">
//            <Loader />
//          </div>
//        ) : (
//          <>
//            {searchText && (
//              <h2 className="font-medium text-[#666e75] text-xl mb-3">
//                Showing Resuls for <span className="text-[#222328]">{searchText}</span>:
//              </h2>
//            )}
//            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
//              {searchText ? (
//                <RenderCards
//                  data={searchedResults}
//                  title="No Search Results Found"
//                />
//              ) : (
//                <RenderCards
//                  data={allPosts}
//                  title="No Posts Yet"
//                />
//              )}
//            </div>
//          </>
//        )}
//      </div>
//    </section>
//  );
//};
//
//export default Home;


import React, { useEffect, useState } from 'react';

import { Card, FormField, Loader } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return (
      data.map((post) => <Card key={post._id} {...post} />)
    );
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('http://localhost:8080/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
      </div>

      <div className="mt-16">
        <Form
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing Resuls for <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards
                  data={allPosts}
                  title="No Posts Yet"
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;